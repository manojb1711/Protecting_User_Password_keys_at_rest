from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.backends import default_backend
from getpass import getpass

# Function to generate RSA key pair
def generate_keys():
    private_key = rsa.generate_private_key( 
        public_exponent=65537,
        key_size=2048,
        backend=default_backend()
    )
    public_key = private_key.public_key()
    return private_key, public_key

# Function to save RSA key to a file
def save_key(key, filename, passphrase=None):
    encoding = serialization.Encoding.PEM
    if isinstance(key, rsa.RSAPrivateKey):
        format = serialization.PrivateFormat.PKCS8
        encryption_algorithm = (serialization.NoEncryption()
                                if passphrase is None
                                else serialization.BestAvailableEncryption(
                                    passphrase.encode()))
        pem = key.private_bytes(
            encoding=encoding,
            format=format,
            encryption_algorithm=encryption_algorithm
        )
    else:
        format = serialization.PublicFormat.SubjectPublicKeyInfo
        pem = key.public_bytes(
            encoding=encoding,
            format=format
        )
    with open(filename, 'wb') as f:
        f.write(pem)

# Function to load RSA public key from a file
def load_public_key(filename):
    with open(filename, 'rb') as f:
        pem = f.read()
        try:
            return serialization.load_pem_public_key(pem, backend=default_backend())
        except ValueError as e:
            print(f"Error loading public key: {e}")
            return None

# Function to encrypt a message using the public key
def encrypt_message(message, public_key):
    ciphertext = public_key.encrypt(
        message.encode(),
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return ciphertext

# Function to decrypt a message using the private key
def decrypt_message(ciphertext, private_key):
    plaintext = private_key.decrypt(
        ciphertext,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return plaintext.decode()

if __name__ == "__main__":
    action = input("Do you want to (g)enerate keys, (e)ncrypt a message, or (d)ecrypt a message? ")

    if action == 'g':
        passphrase = getpass("Enter a passphrase to protect the private key (or press enter to leave unprotected): ")
        private_key, public_key = generate_keys()
        save_key(private_key, 'private_key.pem', passphrase if passphrase else None)
        save_key(public_key, 'public_key.pem')
        print("Keys generated and saved successfully.")

    elif action == 'e':
        public_key = load_public_key('public_key.pem')
        if public_key:
            message = input("Enter the message to encrypt: ")
            ciphertext = encrypt_message(message, public_key)
            with open('encrypted_message.bin', 'wb') as f:
                f.write(ciphertext)
            print("Message encrypted and saved to encrypted_message.bin.")

    elif action == 'd':
        passphrase = getpass("Enter the passphrase for the private key (or press enter if unprotected): ")
        private_key = serialization.load_pem_private_key(
            open('private_key.pem', 'rb').read(),
            password=passphrase.encode() if passphrase else None,
            backend=default_backend()
        )
        with open('encrypted_message.bin', 'rb') as f:
            ciphertext = f.read()
        decrypted_message = decrypt_message(ciphertext, private_key)
        print("Decrypted message:", decrypted_message)

    else:
        print("Invalid action.")
